from tkinter import * 
from tkinter.ttk import *
from PIL import Image, ImageTk
from gui.drawing import CircuitDrawing
from engine import *

class MainWindow:
    def __init__(self) -> None:
        root = Tk()
        icon = ImageTk.PhotoImage(Image.open(r"icon.png"))
        root.iconphoto(True, icon)
        root.title("Patoc: a graphical tool for quantum circuits")
        root.config(bg="white")



        # org1 = Gate(0,"in", pos=(0,0))
        # org2 = Gate(1,"in", pos=(0,1))
        # org3 = Gate(2,"in", pos=(0,2))
        # org4 = Gate(3,"in", pos=(0,3))
        # h1 = Gate(4,"A", pos=(1,0))
        # cx1 = Gate(5,"CNOT", pos=(1,[1,2]))
        # h2 = Gate(6,"B", pos=(2,1))
        # h3 = Gate(7,"C", pos=(2,2))
        # cx2 = Gate(8,"CNOT", pos=(3,[2,0]))
        # h4 = Gate(9,"E", pos=(4,1))
        # d1 = Gate(10,"D", pos=(5,1))
        # h5 = Gate(11,"F", pos=(7,1))
        # cx3 = Gate(12,"CNOT", pos=(7,[2,3]))
        # g1 = Gate(13,"G", pos=(8,0))
        # g2 = Gate(14,"G", pos=(9,0))
        # dst1 = Gate(15,"out", pos=(10,0))
        # dst2 = Gate(16,"out", pos=(10,1))
        # dst3 = Gate(17,"out", pos=(10,2))
        # gates = [org1,org2,org3,org4,h1,cx1,h2,h3,cx2,h4,d1,h5,cx3,g1,g2,dst1,dst2,dst3]
        # for i in range(len(gates)): gates[i].id = i
        # circuit = Circuit("cz-one-cnot", gates,[0,1,2,3])
        # circuit.connect(org1, h1, wiring=(0,0))
        # circuit.connect(org2, cx1, wiring=(0,0))
        # circuit.connect(org3, cx1, wiring=(0,1))
        # circuit.connect(org4, dst3, wiring=(0,0))
        # circuit.connect(h1, cx2, wiring=(0,1))
        # circuit.connect(cx1, h2, wiring=(0,0))
        # circuit.connect(cx1, h3, wiring=(1,0))
        # circuit.connect(h2, h4, wiring=(0,0))
        # circuit.connect(h3, cx2, wiring=(0,0))
        # circuit.connect(cx2, g1, wiring=(1,0))
        # circuit.connect(cx2, cx3, wiring=(0,1))
        # circuit.connect(h4, d1, wiring=(0,0))
        # circuit.connect(d1, h5, wiring=(0,0))
        # circuit.connect(d1, cx3, wiring=(1,0))
        # circuit.connect(h5, g1, wiring=(0,1))
        # circuit.connect(cx3, g2, wiring=(0,1))
        # circuit.connect(cx3, dst2, wiring=(1,0))
        # circuit.connect(g1, g2, wiring=(0,0))
        # circuit.connect(g2, dst1, wiring=(0,0))

        # org1 = Gate(0,"in", pos=(0,0))
        # org2 = Gate(1,"in", pos=(0,1))
        # org3 = Gate(2,"in", pos=(0,2))
        # h1 = Gate(3,"H", pos=(1,0))
        # h2 = Gate(4,"H", pos=(1,1))
        # h3 = Gate(5,"H", pos=(2,1))
        # h4 = Gate(6,"H", pos=(2,0))
        # dst1 = Gate(7,"out", pos=(5,0))
        # dst2 = Gate(8,"out", pos=(5,1))
        # dst3 = Gate(9,"out", pos=(5,2))
        # circuit = Circuit("cz-one-cnot", [org1,org2,org3,h1,h2,h3,h4,dst1,dst2,dst3],[0,1,2])
        # circuit.connect(org1, h1, wiring=(0,0))
        # circuit.connect(org2, h2, wiring=(0,0))
        # circuit.connect(org3, dst3, wiring=(0,0))
        # circuit.connect(h1, h3, wiring=(0,0))
        # circuit.connect(h4, dst1, wiring=(0,0))
        # circuit.connect(h2, h4, wiring=(0,0))
        # circuit.connect(h3, dst2, wiring=(0,0))

        # in0 = Gate(0,"in", pos=(0,0))
        # in1 = Gate(0,"in", pos=(0,1))
        # in2 = Gate(0,"in", pos=(0,2))
        # in3 = Gate(0,"in", pos=(0,3))
        # in4 = Gate(0,"in", pos=(0,4))
        # in5 = Gate(0,"in", pos=(0,5))
        # a = Gate(0,"A", pos=(1,0))
        # b = Gate(0,"B", pos=(1,1))
        # c = Gate(0,"C", pos=(2,0))
        # e = Gate(0,"E", arity=3, pos=(3,[0,1,2]))
        # cx = Gate(0,"CNOT", pos=(4,[0,1]))
        # f = Gate(0,"F", pos=(5,2))
        # h = Gate(0,"H", arity=4, pos=(1,[2,3,4,5]))
        # j = Gate(0,"J", arity=3, pos=(2,[2,4,5]))
        # k = Gate(0,"K", arity=3, pos=(4,[2,3,5]))
        # out0 = Gate(0,"out", pos=(6,0))
        # out1 = Gate(0,"out", pos=(6,1))
        # out2 = Gate(0,"out", pos=(6,2))
        # out3 = Gate(0,"out", pos=(6,3))
        # out4 = Gate(0,"out", pos=(6,4))
        # out5 = Gate(0,"out", pos=(6,5))
        # gates = [in0,in1,in2,in3,in4,in5,a,b,c,e,cx,f,h,j,k,out0,out1,out2,out3,out4,out5]
        # for i in range(len(gates)): gates[i].id = i
        # circuit = Circuit("cz-one-cnot", gates, [0,1,2,3,4,5])
        # circuit.connect(in0, a, wiring=(0,0))
        # circuit.connect(a, c, wiring=(0,0))
        # circuit.connect(c, e, wiring=(0,0))
        # circuit.connect(e, cx, wiring=(0,0))
        # circuit.connect(cx, out0, wiring=(0,0))
        # circuit.connect(in1, b, wiring=(0,0))
        # circuit.connect(b, e, wiring=(0,1))
        # circuit.connect(e, cx, wiring=(1,1))
        # circuit.connect(cx, out1, wiring=(1,0))
        # circuit.connect(in2, h, wiring=(0,0))
        # circuit.connect(h, j, wiring=(0,0))
        # circuit.connect(j, e, wiring=(0,2))
        # circuit.connect(e, k, wiring=(2,0))
        # circuit.connect(k, f, wiring=(0,0))
        # circuit.connect(f, out2, wiring=(0,0))
        # circuit.connect(in3, h, wiring=(0,1))
        # circuit.connect(h, k, wiring=(1,1))
        # circuit.connect(k, out3, wiring=(1,0))
        # circuit.connect(in4, h, wiring=(0,2))
        # circuit.connect(h, j, wiring=(2,1))
        # circuit.connect(j, out4, wiring=(1,0))
        # circuit.connect(in5, h, wiring=(0,3))
        # circuit.connect(h, j, wiring=(3,2))
        # circuit.connect(j, k, wiring=(2,2))
        # circuit.connect(k, out5, wiring=(2,0))

        # Big circuit containing LHS of axiom CZ
        circuit = Circuit("My circuit")
        org1 = circuit.gate("in", pos=(0,0), org=True)
        org2 = circuit.gate("in", pos=(0,1), org=True)
        org3 = circuit.gate("in", pos=(0,2), org=True)
        org4 = circuit.gate("in", pos=(0,3), org=True)
        h1 = circuit.gate("H", pos=(1,1))
        a = circuit.gate("A", arity=2, pos=(1,[2,3]))
        h2 = circuit.gate("H", pos=(2,2))
        cx1 = circuit.gate("CNOT", pos=(3,[1,2]))
        h3 = circuit.gate("H", pos=(4,2))
        b = circuit.gate("B", arity=2, pos=(4,[0,1]))
        cx2 = circuit.gate("CNOT", pos=(5,[1,2]))
        dst1 = circuit.gate("out", pos=(7,0), dst=True)
        dst2 = circuit.gate("out", pos=(7,1), dst=True)
        dst3 = circuit.gate("out", pos=(7,2), dst=True)
        dst4 = circuit.gate("out", pos=(7,3), dst=True)
        circuit.connect(org1, b, wiring=(0,0))
        circuit.connect(org2, h1, wiring=(0,0))
        circuit.connect(org3, a, wiring=(0,0))
        circuit.connect(org4, a, wiring=(0,1))
        circuit.connect(a, h2, wiring=(0,0))
        circuit.connect(a, dst4, wiring=(1,0))
        circuit.connect(h1, cx1, wiring=(0,0))
        circuit.connect(h2, cx1, wiring=(0,1))
        circuit.connect(cx1, b, wiring=(0,1))
        circuit.connect(cx1, h3, wiring=(1,0))
        circuit.connect(b, dst1, wiring=(0,0))
        circuit.connect(b, cx2, wiring=(1,0))
        circuit.connect(h3, cx2, wiring=(0,1))
        circuit.connect(cx2, dst2, wiring=(0,0))
        # circuit.connect(cx2, dst3, wiring=(1,0))

        h4 = circuit.gate("H", pos=(6,2))
        circuit.connect(cx2, h4, wiring=(1,0))
        circuit.connect(h4, dst3, wiring=(0,0))


        # LHS of axiom CZ
        axiom = Circuit("cz-one-cnot")
        CZorg1 = axiom.gate("in", pos=(0,0), org=True)
        CZorg2 = axiom.gate("in", pos=(0,1), org=True)
        CZh1 = axiom.gate("H", pos=(1,1))
        CZcx1 = axiom.gate("CNOT", pos=(2,[0,1]))
        CZh2 = axiom.gate("H", pos=(3,1))
        CZdst1 = axiom.gate("out", pos=(4,0), dst=True)
        CZdst2 = axiom.gate("out", pos=(4,1), dst=True)
        axiom.connect(CZorg1, CZcx1, wiring=(0,0))
        axiom.connect(CZorg2, CZh1, wiring=(0,0))
        axiom.connect(CZcx1, CZdst1, wiring=(0,0))
        axiom.connect(CZh1, CZcx1, wiring=(0,1))
        axiom.connect(CZcx1, CZh2, wiring=(1,0))
        axiom.connect(CZh2, CZdst2, wiring=(0,0))

        canvas = Canvas(root, height=300, width=650, bg="white", highlightthickness=0)
        canvas.pack()
        self.drawing = CircuitDrawing(canvas, circuit)

        canvasaxiom = Canvas(root, height=200, width=650, bg="white", highlightthickness=0)
        canvasaxiom.pack()
        CircuitDrawing(canvasaxiom, axiom)

        circuit.matchAxiom(axiom)

        root.eval('tk::PlaceWindow . center')
        root.mainloop()

def printtest():
    print("This is a print from /app/window.py")